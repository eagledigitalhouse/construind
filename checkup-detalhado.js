import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
dotenv.config();

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas!');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkupDetalhado() {
  console.log('üîç CHECKUP DETALHADO DO BANCO DE DADOS\n');
  console.log('=' .repeat(60));
  
  try {
    // 1. Status das tabelas principais
    console.log('\nüìä STATUS DAS TABELAS PRINCIPAIS:');
    console.log('-'.repeat(40));
    
    // Verificar entities
    console.log('\nüîç TABELA: entities');
    const { data: entitiesData, error: entitiesError } = await supabase
      .from('entities')
      .select('*')
      .limit(1);
    
    if (entitiesError) {
      console.log('‚ùå STATUS: N√ÉO EXISTE');
      console.log(`   Erro: ${entitiesError.message}`);
    } else {
      console.log('‚úÖ STATUS: EXISTE');
      const { count } = await supabase
        .from('entities')
        .select('*', { count: 'exact', head: true });
      console.log(`   üìä Registros: ${count || 0}`);
    }
    
    // Verificar entidades
    console.log('\nüîç TABELA: entidades');
    const { data: entidadesData, error: entidadesError } = await supabase
      .from('entidades')
      .select('*')
      .limit(1);
    
    if (entidadesError) {
      console.log('‚ùå STATUS: N√ÉO EXISTE');
      console.log(`   Erro: ${entidadesError.message}`);
    } else {
      console.log('‚úÖ STATUS: EXISTE');
      const { count } = await supabase
        .from('entidades')
        .select('*', { count: 'exact', head: true });
      console.log(`   üìä Registros: ${count || 0}`);
      
      if (entidadesData && entidadesData.length > 0) {
        console.log('   üèóÔ∏è  ESTRUTURA:');
        const campos = Object.keys(entidadesData[0]);
        campos.forEach(campo => {
          console.log(`      - ${campo}`);
        });
      }
    }
    
    // Verificar pre_inscricao_expositores
    console.log('\nüîç TABELA: pre_inscricao_expositores');
    const { data: preInscricaoData, error: preInscricaoError } = await supabase
      .from('pre_inscricao_expositores')
      .select('*')
      .limit(1);
    
    if (preInscricaoError) {
      console.log('‚ùå STATUS: N√ÉO EXISTE');
      console.log(`   Erro: ${preInscricaoError.message}`);
    } else {
      console.log('‚úÖ STATUS: EXISTE');
      const { count } = await supabase
        .from('pre_inscricao_expositores')
        .select('*', { count: 'exact', head: true });
      console.log(`   üìä Registros: ${count || 0}`);
    }
    
    // 2. An√°lise dos dados da tabela entidades
    if (!entidadesError && entidadesData) {
      console.log('\n' + '='.repeat(60));
      console.log('üìã AN√ÅLISE DETALHADA DA TABELA ENTIDADES:');
      console.log('-'.repeat(40));
      
      // Buscar todos os registros para an√°lise
      const { data: todasEntidades } = await supabase
        .from('entidades')
        .select('*');
      
      if (todasEntidades && todasEntidades.length > 0) {
        console.log(`\nüìä Total de entidades: ${todasEntidades.length}`);
        
        // An√°lise por tipo
        const tiposCount = {};
        const categoriasCount = {};
        const statusCount = {};
        
        todasEntidades.forEach(entidade => {
          // Contar tipos
          const tipo = entidade.tipo || 'n√£o_definido';
          tiposCount[tipo] = (tiposCount[tipo] || 0) + 1;
          
          // Contar categorias
          const categoria = entidade.categoria || 'n√£o_definida';
          categoriasCount[categoria] = (categoriasCount[categoria] || 0) + 1;
          
          // Contar status
          const status = entidade.status || 'n√£o_definido';
          statusCount[status] = (statusCount[status] || 0) + 1;
        });
        
        console.log('\nüè∑Ô∏è  DISTRIBUI√á√ÉO POR TIPO:');
        Object.entries(tiposCount).forEach(([tipo, count]) => {
          console.log(`   ${tipo}: ${count}`);
        });
        
        console.log('\nüìÇ DISTRIBUI√á√ÉO POR CATEGORIA:');
        Object.entries(categoriasCount).forEach(([categoria, count]) => {
          console.log(`   ${categoria}: ${count}`);
        });
        
        console.log('\nüìä DISTRIBUI√á√ÉO POR STATUS:');
        Object.entries(statusCount).forEach(([status, count]) => {
          console.log(`   ${status}: ${count}`);
        });
        
        // Mostrar exemplo de registro
        console.log('\nüìÑ EXEMPLO DE REGISTRO:');
        console.log('-'.repeat(30));
        const exemplo = todasEntidades[0];
        Object.entries(exemplo).forEach(([campo, valor]) => {
          if (typeof valor === 'object' && valor !== null) {
            console.log(`${campo}: ${JSON.stringify(valor, null, 2)}`);
          } else {
            console.log(`${campo}: ${valor}`);
          }
        });
      }
    }
    
    // 3. Verificar outras tabelas do sistema
    console.log('\n' + '='.repeat(60));
    console.log('üóÇÔ∏è  OUTRAS TABELAS DO SISTEMA:');
    console.log('-'.repeat(40));
    
    const outrasTabelas = [
      'contratos_gerados',
      'modelos_contratos', 
      'stands_fespin',
      'categorias',
      'newsletters',
      'entidades_historico',
      'entidades_documentos',
      'entidades_lembretes'
    ];
    
    for (const tabela of outrasTabelas) {
      try {
        const { data, error } = await supabase
          .from(tabela)
          .select('*')
          .limit(1);
        
        if (error) {
          console.log(`‚ùå ${tabela}: ${error.message}`);
        } else {
          const { count } = await supabase
            .from(tabela)
            .select('*', { count: 'exact', head: true });
          
          console.log(`‚úÖ ${tabela}: ${count || 0} registros`);
        }
      } catch (err) {
        console.log(`‚ùå ${tabela}: Erro inesperado`);
      }
    }
    
    console.log('\n' + '='.repeat(60));
    console.log('üéØ CONCLUS√ïES:');
    console.log('-'.repeat(40));
    
    if (entitiesError) {
      console.log('‚ùå A tabela ENTITIES (do template) N√ÉO EXISTE no banco atual');
    } else {
      console.log('‚úÖ A tabela ENTITIES (do template) EXISTE no banco atual');
    }
    
    if (entidadesError) {
      console.log('‚ùå A tabela ENTIDADES (customizada) N√ÉO EXISTE no banco atual');
    } else {
      console.log('‚úÖ A tabela ENTIDADES (customizada) EXISTE no banco atual');
    }
    
    console.log('\nüéâ CHECKUP DETALHADO CONCLU√çDO!');
    
  } catch (error) {
    console.error('üí• Erro durante o checkup:', error.message);
  }
}

// Executar o checkup
checkupDetalhado();